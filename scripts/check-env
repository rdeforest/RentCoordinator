#!/usr/bin/env coffee

{ execSync } = require 'child_process'
fs           = require 'fs'
path         = require 'path'


issues   = []
warnings = []
cwd      = process.cwd()


findProjectProcesses = ->
  processes = []
  try
    output = execSync("lsof -Fn -a +D #{cwd} -c node -c coffee 2>/dev/null", encoding: 'utf8').trim()
    return processes unless output

    lines = output.split '\n'
    currentPid = null

    for line in lines
      if line.startsWith 'p'
        currentPid = line.substring 1
      else if line.startsWith('n') and currentPid
        processes.push { pid: currentPid, file: line.substring(1) }

  catch err

  processes

getProcessPorts = (pid) ->
  try
    output = execSync("lsof -Pan -p #{pid} -i TCP -s TCP:LISTEN 2>/dev/null | awk 'NR>1 {print $9}'", encoding: 'utf8').trim()
    return [] unless output

    output.split('\n').map (line) ->
      match = line.match /:(\d+)$/
      if match then match[1] else null
    .filter (port) -> port?

  catch err
    []


console.log 'Checking development environment...\n'


processes = findProjectProcesses()
if processes.length > 0
  pidMap = {}
  for proc in processes
    pidMap[proc.pid] ?= []
    pidMap[proc.pid].push proc.file

  console.log "Found #{Object.keys(pidMap).length} process(es) running from #{cwd}:\n"

  for pid, files of pidMap
    ports = getProcessPorts pid
    portInfo = if ports.length > 0 then " [ports: #{ports.join(', ')}]" else ""
    mainFile = files.find((f) -> f.endsWith('main.coffee')) or files[0]
    warnings.push "PID #{pid}#{portInfo}: #{path.relative(cwd, mainFile)}"

  console.log ''

try
  files   = fs.readdirSync '.'
  testDbs = files.filter (f) -> f.match /^test.*\.db$/

  if testDbs.length > 0
    warnings.push "Found #{testDbs.length} test database(s): #{testDbs.join(', ')}"
    warnings.push "  Fix: rm -f test-*.db"

    try
      { DatabaseSync } = require 'node:sqlite'

      for dbFile in testDbs
        try
          db              = new DatabaseSync dbFile
          currentSessions = db.prepare('SELECT * FROM current_sessions').all()
          activeSessions  = db.prepare("SELECT * FROM work_sessions WHERE status = 'active'").all()

          if currentSessions.length > 0
            issues.push "Test database #{dbFile} has #{currentSessions.length} active session(s)"
            for session in currentSessions
              issues.push "  Worker '#{session.worker}' has session: #{session.session_id}"

          if activeSessions.length > 0
            issues.push "Test database #{dbFile} has #{activeSessions.length} active work session(s)"

          db.close()
        catch dbErr

    catch importErr

catch err


checkUnexpectedJs = (dir) ->
  return unless fs.existsSync dir

  try
    files = fs.readdirSync dir, withFileTypes: true
    for file in files
      if file.isDirectory()
        checkUnexpectedJs path.join dir, file.name
      else if file.name.endsWith('.js') and not file.name.endsWith('.test.js')
        coffeePath = path.join dir, file.name.replace /\.js$/, '.coffee'
        if fs.existsSync coffeePath
          warnings.push "Stray .js file with .coffee source: #{path.join(dir, file.name)}"
  catch err


checkUnexpectedJs 'lib'
checkUnexpectedJs 'scripts'
checkUnexpectedJs 'test'


console.log '\n=== ISSUES (must fix) ==='
if issues.length is 0
  console.log '✓ No issues found'
else
  for issue in issues
    console.log "✗ #{issue}"

console.log '\n=== WARNINGS (should clean up) ==='
if warnings.length is 0
  console.log '✓ No warnings'
else
  for warning in warnings
    console.log "⚠ #{warning}"

console.log '\n=== SUMMARY ==='
console.log "Issues: #{issues.length}"
console.log "Warnings: #{warnings.length}"

if issues.length > 0
  console.log '\nEnvironment has issues that should be fixed before proceeding.'
  process.exit 1
else if warnings.length > 0
  console.log '\nEnvironment is usable but could be cleaner.'
  process.exit 0
else
  console.log '\n✓ Environment is clean!'
  process.exit 0
