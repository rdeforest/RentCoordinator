// Generated by CoffeeScript 2.7.0
(function() {
  //!/usr/bin/env node
  // scripts/build.coffee
  // Build script: compile CoffeeScript and fix import paths
  var build, exec, execAsync, fixImportPaths, fs, path, promisify;

  ({exec} = require('child_process'));

  ({promisify} = require('util'));

  fs = require('fs');

  path = require('path');

  execAsync = promisify(exec);

  // Fix import paths in all .js files
  fixImportPaths = function(dir) {
    var content, file, filePath, i, len, ref, results;
    if (!fs.existsSync(dir)) {
      return;
    }
    ref = fs.readdirSync(dir, {
      withFileTypes: true
    });
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      file = ref[i];
      filePath = path.join(dir, file.name);
      if (file.isDirectory()) {
        results.push(fixImportPaths(filePath));
      } else if (file.isFile() && file.name.endsWith('.js')) {
        content = fs.readFileSync(filePath, 'utf8');
        // Fix static imports: from './file.coffee' → from './file.js'
        content = content.replace(/from\s+['"](\.\.?\/[^'"]+)\.coffee['"]/g, "from '$1.js'");
        // Fix dynamic imports: import('./file.coffee') → import('./file.js')
        content = content.replace(/import\s*\(\s*['"](\.\.?\/[^'"]+)\.coffee['"]\s*\)/g, "import('$1.js')");
        results.push(fs.writeFileSync(filePath, content, 'utf8'));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  build = async function() {
    var error;
    console.log('Building RentCoordinator...');
    try {
      // Compile server-side CoffeeScript to dist/
      console.log('Compiling server-side CoffeeScript...');
      await execAsync('npx coffee -b -c -M -o dist .');
      // Fix import paths in dist/
      console.log('Fixing import paths...');
      fixImportPaths('dist');
      // Compile client-side CoffeeScript to static/js
      console.log('Compiling client-side CoffeeScript...');
      await execAsync('npx coffee -b -c -M -o static/js static/coffee');
      return console.log('✓ Build complete!');
    } catch (error1) {
      error = error1;
      console.error('✗ Build error:', error.message);
      return process.exit(1);
    }
  };

  build();

}).call(this);
