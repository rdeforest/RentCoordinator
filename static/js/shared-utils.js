// Generated by CoffeeScript 2.7.0
// static/coffee/shared-utils.coffee

// Shared utility functions for all pages
window.SharedUtils = {
  // Format currency
  formatCurrency: function(amount) {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount);
  },
  // Format date/time
  formatDateTime: function(date) {
    return date.toLocaleString([], {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  },
  // Format duration from seconds
  formatDuration: function(seconds) {
    var hours, minutes, secs;
    hours = Math.floor(seconds / 3600);
    minutes = Math.floor((seconds % 3600) / 60);
    secs = seconds % 60;
    if (hours > 0) {
      return `${hours}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
    } else {
      return `${minutes}:${String(secs).padStart(2, '0')}`;
    }
  },
  // Escape HTML to prevent XSS
  escapeHtml: function(text) {
    var div;
    div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  },
  // Make async fetch with standard error handling
  fetchJSON: async function(url, options = {}) {
    var data, err, ref, response;
    try {
      response = (await fetch(url, options));
      if ((ref = response.headers.get('content-type')) != null ? ref.includes('application/json') : void 0) {
        data = (await response.json());
      }
      if (response.ok) {
        return {
          ok: true,
          data
        };
      } else {
        return {
          ok: false,
          error: (data != null ? data.error : void 0) || `Request failed: ${response.status}`
        };
      }
    } catch (error) {
      err = error;
      return {
        ok: false,
        error: err.message
      };
    }
  },
  // Debounce function calls
  debounce: function(func, wait) {
    var timeout;
    timeout = null;
    return function() {
      var args, context;
      context = this;
      args = arguments;
      clearTimeout(timeout);
      return timeout = setTimeout(function() {
        return func.apply(context, args);
      }, wait);
    };
  },
  // Get worker name from localStorage
  getLastWorker: function() {
    return localStorage.getItem('lastWorker');
  },
  // Save worker name to localStorage
  saveLastWorker: function(worker) {
    if (worker) {
      return localStorage.setItem('lastWorker', worker);
    }
  },
  // Show/hide elements
  show: function(element) {
    if (element) {
      return element.style.display = 'block';
    }
  },
  hide: function(element) {
    if (element) {
      return element.style.display = 'none';
    }
  },
  // Add loading state to button
  setButtonLoading: function(button, isLoading) {
    if (isLoading) {
      button.disabled = true;
      button.dataset.originalText = button.textContent;
      return button.textContent = 'Loading...';
    } else {
      button.disabled = false;
      if (button.dataset.originalText) {
        return button.textContent = button.dataset.originalText;
      }
    }
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLXV0aWxzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLyIsInNvdXJjZXMiOlsic3RhdGljL2NvZmZlZS9zaGFyZWQtdXRpbHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFd0M7OztBQUV4QyxNQUFNLENBQUMsV0FBUCxHQUVFLENBQUE7O0VBQUEsY0FBQSxFQUFnQixRQUFBLENBQUMsTUFBRCxDQUFBO1dBQ2QsSUFBSSxJQUFJLENBQUMsWUFBVCxDQUFzQixPQUF0QixFQUNFO01BQUEsS0FBQSxFQUFPLFVBQVA7TUFDQSxRQUFBLEVBQVU7SUFEVixDQURGLENBR0MsQ0FBQyxNQUhGLENBR1MsTUFIVDtFQURjLENBQWhCOztFQU9BLGNBQUEsRUFBZ0IsUUFBQSxDQUFDLElBQUQsQ0FBQTtXQUNkLElBQUksQ0FBQyxjQUFMLENBQW9CLEVBQXBCLEVBQ0U7TUFBQSxLQUFBLEVBQU8sT0FBUDtNQUNBLEdBQUEsRUFBSyxTQURMO01BRUEsSUFBQSxFQUFNLFNBRk47TUFHQSxNQUFBLEVBQVE7SUFIUixDQURGO0VBRGMsQ0FQaEI7O0VBZUEsY0FBQSxFQUFnQixRQUFBLENBQUMsT0FBRCxDQUFBO0FBQ2xCLFFBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQTtJQUFJLEtBQUEsR0FBUSxJQUFJLENBQUMsS0FBTCxDQUFXLE9BQUEsR0FBVSxJQUFyQjtJQUNSLE9BQUEsR0FBVSxJQUFJLENBQUMsS0FBTCxDQUFXLENBQUMsT0FBQSxHQUFVLElBQVgsQ0FBQSxHQUFtQixFQUE5QjtJQUNWLElBQUEsR0FBTyxPQUFBLEdBQVU7SUFFakIsSUFBRyxLQUFBLEdBQVEsQ0FBWDthQUNFLENBQUEsQ0FBQSxDQUFHLEtBQUgsQ0FBQSxDQUFBLENBQUEsQ0FBWSxNQUFBLENBQU8sT0FBUCxDQUFlLENBQUMsUUFBaEIsQ0FBeUIsQ0FBekIsRUFBNEIsR0FBNUIsQ0FBWixDQUFBLENBQUEsQ0FBQSxDQUFnRCxNQUFBLENBQU8sSUFBUCxDQUFZLENBQUMsUUFBYixD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QUFDLFlBQW5FO2VBQUEsTUFBTSxDQUFDLFdBQVAsR0FBcUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFwQztPQU5GOztFQURnQjtBQXZFbEIiLCJzb3VyY2VzQ29udGVudCI6WyIjIHN0YXRpYy9jb2ZmZWUvc2hhcmVkLXV0aWxzLmNvZmZlZVxuXG4jIFNoYXJlZCB1dGlsaXR5IGZ1bmN0aW9ucyBmb3IgYWxsIHBhZ2VzXG5cbndpbmRvdy5TaGFyZWRVdGlscyA9XG4gICMgRm9ybWF0IGN1cnJlbmN5XG4gIGZvcm1hdEN1cnJlbmN5OiAoYW1vdW50KSAtPlxuICAgIG5ldyBJbnRsLk51bWJlckZvcm1hdCgnZW4tVVMnLFxuICAgICAgc3R5bGU6ICdjdXJyZW5jeSdcbiAgICAgIGN1cnJlbmN5OiAnVVNEJ1xuICAgICkuZm9ybWF0IGFtb3VudFxuXG4gICMgRm9ybWF0IGRhdGUvdGltZVxuICBmb3JtYXREYXRlVGltZTogKGRhdGUpIC0+XG4gICAgZGF0ZS50b0xvY2FsZVN0cmluZyBbXSxcbiAgICAgIG1vbnRoOiAnc2hvcnQnXG4gICAgICBkYXk6ICdudW1lcmljJ1xuICAgICAgaG91cjogJzItZGlnaXQnXG4gICAgICBtaW51dGU6ICcyLWRpZ2l0J1xuXG4gICMgRm9ybWF0IGR1cmF0aW9uIGZyb20gc2Vjb25kc1xuICBmb3JtYXREdXJhdGlvbjogKHNlY29uZHMpIC0+XG4gICAgaG91cnMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyAzNjAwKVxuICAgIG1pbnV0ZXMgPSBNYXRoLmZsb29yKChzZWNvbmRzICUgMzYwMCkgLyA2MClcbiAgICBzZWNzID0gc2Vjb25kcyAlIDYwXG5cbiAgICBpZiBob3VycyA+IDBcbiAgICAgIFwiI3tob3Vyc306I3tTdHJpbmcobWludXRlcykucGFkU3RhcnQoMiwgJzAnKX06I3tTdHJpbmcoc2VjcykucGFkU3RhcnQoMiwgJzAnKX1cIlxuICAgIGVsc2VcbiAgICAgIFwiI3ttaW51dGVzfToje1N0cmluZyhzZWNzKS5wYWRTdGFydCgyLCAnMCcpfVwiXG5cbiAgIyBFc2NhcGUgSFRNTCB0byBwcmV2ZW50IFhTU1xuICBlc2NhcGVIdG1sOiAodGV4dCkgLT5cbiAgICBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICdkaXYnXG4gICAgZGl2LnRleHRDb250ZW50ID0gdGV4dFxuICAgIGRpdi5pbm5lckhUTUxcblxuICAjIE1ha2UgYXN5bmMgZmV0Y2ggd2l0aCBzdGFuZGFyZCBlcnJvciBoYW5kbGluZ1xuICBmZXRjaEpTT046ICh1cmwsIG9wdGlvbnMgPSB7fSkgLT5cbiAgICB0cnlcbiAgICAgIHJlc3BvbnNlID0gYXdhaXQgZmV0Y2ggdXJsLCBvcHRpb25zXG4gICAgICBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpIGlmIHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKT8uaW5jbHVkZXMoJ2FwcGxpY2F0aW9uL2pzb24nKVxuXG4gICAgICBpZiByZXNwb25zZS5va1xuICAgICAgICByZXR1cm4geyBvazogdHJ1ZSwgZGF0YSB9XG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiB7IG9rOiBmYWxzZSwgZXJyb3I6IGRhdGE/LmVycm9yIG9yIFwiUmVxdWVzdCBmYWlsZWQ6ICN7cmVzcG9uc2Uuc3RhdHVzfVwiIH1cbiAgICBjYXRjaCBlcnJcbiAgICAgIHJldHVybiB7IG9rOiBmYWxzZSwgZXJyb3I6IGVyci5tZXNzYWdlIH1cblxuICAjIERlYm91bmNlIGZ1bmN0aW9uIGNhbGxzXG4gIGRlYm91bmNlOiAoZnVuYywgd2FpdCkgLT5cbiAgICB0aW1lb3V0ID0gbnVsbFxuICAgIC0+XG4gICAgICBjb250ZXh0ID0gdGhpc1xuICAgICAgYXJncyA9IGFyZ3VtZW50c1xuICAgICAgY2xlYXJUaW1lb3V0IHRpbWVvdXRcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0IC0+XG4gICAgICAgIGZ1bmMuYXBwbHkgY29udGV4dCwgYXJnc1xuICAgICAgLCB3YWl0XG5cbiAgIyBHZXQgd29ya2VyIG5hbWUgZnJvbSBsb2NhbFN0b3JhZ2VcbiAgZ2V0TGFzdFdvcmtlcjogLT5cbiAgICBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSAnbGFzdFdvcmtlcidcblxuICAjIFNhdmUgd29ya2VyIG5hbWUgdG8gbG9jYWxTdG9yYWdlXG4gIHNhdmVMYXN0V29ya2VyOiAod29ya2VyKSAtPlxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtICdsYXN0V29ya2VyJywgd29ya2VyIGlmIHdvcmtlclxuXG4gICMgU2hvdy9oaWRlIGVsZW1lbnRzXG4gIHNob3c6IChlbGVtZW50KSAtPlxuICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jaycgaWYgZWxlbWVudFxuXG4gIGhpZGU6IChlbGVtZW50KSAtPlxuICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJyBpZiBlbGVtZW50XG5cbiAgIyBBZGQgbG9hZGluZyBzdGF0ZSB0byBidXR0b25cbiAgc2V0QnV0dG9uTG9hZGluZzogKGJ1dHRvbiwgaXNMb2FkaW5nKSAtPlxuICAgIGlmIGlzTG9hZGluZ1xuICAgICAgYnV0dG9uLmRpc2FibGVkID0gdHJ1ZVxuICAgICAgYnV0dG9uLmRhdGFzZXQub3JpZ2luYWxUZXh0ID0gYnV0dG9uLnRleHRDb250ZW50XG4gICAgICBidXR0b24udGV4dENvbnRlbnQgPSAnTG9hZGluZy4uLidcbiAgICBlbHNlXG4gICAgICBidXR0b24uZGlzYWJsZWQgPSBmYWxzZVxuICAgICAgYnV0dG9uLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQub3JpZ2luYWxUZXh0IGlmIGJ1dHRvbi5kYXRhc2V0Lm9yaWdpbmFsVGV4dCJdfQ==
//# sourceURL=/mnt/nvme0n1p4/git/github/rdeforest/RentCoordinator/static/coffee/shared-utils.coffee